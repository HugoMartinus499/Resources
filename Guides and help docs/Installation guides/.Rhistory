Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
#install_cmdstan()
simulated_data$Survived = as.numeric(simulated_data$Survived)
simulated_data <- simulated_data %>%
mutate(Sex = as.numeric(Sex) + 1)
# Define the model using the ulam function
model_HMC <- ulam(
alist(
Survived ~ dbern(p),
logit(p) <- a + bPclass * Pclass + bSex * Sex + bAge * Age + bFare * Fare,
a ~ dnorm(0, 0.5),
bPclass ~ dnorm(1.5, 0.5),
bSex ~ dnorm(1.5, 0.25),
bAge ~ dnorm(0, 0.5),
bFare ~ dnorm(0, 0.5)
),
data = simulated_data, chains = 2, cores = 2
)
precis(model_HMC)
knitr::opts_chunk$set(echo = TRUE)
# library(cmdstanr)
library(dagitty)
pacman::p_load(rethinking)
library(tidyverse)
df = read.csv("data/titanic_train.csv")
# Some nice plots here please
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "skyblue") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(df, aes(x = Age)) +
geom_histogram(color = "black", fill = "orange", binwidth = 3) +
labs(x = "Age", y = "Count", title = "Age distribution"),
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ncol = 2)
# Calculate the total number of individuals
total_individuals <- nrow(df)
# Calculate the number of females
num_females <- sum(df$Sex == "female")
# Calculate the probability of being female
probability_female <- num_females / total_individuals
probability_female
total_individuals <- nrow(df)
num_class1 <- sum(df$Pclass == 1)
probability_class1 <- num_class1 / total_individuals
probability_class1
num_class2 <- sum(df$Pclass == 2)
probability_class2 <- num_class2 / total_individuals
probability_class2
num_class3 <- sum(df$Pclass == 3)
probability_class3 <- num_class3 / total_individuals
probability_class3
summary(df,
mean = mean() )
# Create a DAG
dag <- dagitty("dag {
Sex -> Survived
P_class -> Survived
Age -> Survived
Fare -> P_class -> Survived
Age -> P_class
}")
# Plot it
plot(dag)
n <- 891
# Simulate Survived using a binomial distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 5)
# Simulate Sex using a binomial distribution
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
gridExtra::grid.arrange(
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(simulated_data, aes(x = Pclass)) +
geom_bar(fill = "pink") +
labs(x = "Class", y = "Count", title = "Distribution of Simulated class"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ggplot(simulated_data, aes(x = Survived)) +
geom_bar(fill = "green4") +
labs(x = "Survived", y = "Count", title = "Distribution of Simulated Survivability"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "pink") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(simulated_data, aes(x = Sex)) +
geom_bar(fill = "green4") +
labs(x = "Sex", y = "Count", title = "Distribution of Simulated Sex"),
ncol = 2)
n <- 891
# Simulate Survived using a bernoulli distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 14)
# Simulating Sex
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
print(Sim_Fare)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
#install_cmdstan()
simulated_data$Survived = as.numeric(simulated_data$Survived)
simulated_data <- simulated_data %>%
mutate(Sex = as.numeric(Sex) + 1)
# Define the model using the ulam function
model_HMC <- ulam(
alist(
Survived ~ dbern(p),
logit(p) <- a + bPclass * Pclass + bSex * Sex + bAge * Age + bFare * Fare,
a ~ dnorm(0, 0.5),
bPclass ~ dnorm(1.5, 0.5),
bSex ~ dnorm(1.5, 0.25),
bAge ~ dnorm(0, 0.5),
bFare ~ dnorm(0, 0.5)
),
data = simulated_data, chains = 2, cores = 2
)
precis(model_HMC)
knitr::opts_chunk$set(echo = TRUE)
# library(cmdstanr)
library(dagitty)
pacman::p_load(rethinking)
library(tidyverse)
df = read.csv("data/titanic_train.csv")
# Some nice plots here please
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "skyblue") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(df, aes(x = Age)) +
geom_histogram(color = "black", fill = "orange", binwidth = 3) +
labs(x = "Age", y = "Count", title = "Age distribution"),
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ncol = 2)
# Calculate the total number of individuals
total_individuals <- nrow(df)
# Calculate the number of females
num_females <- sum(df$Sex == "female")
# Calculate the probability of being female
probability_female <- num_females / total_individuals
probability_female
total_individuals <- nrow(df)
num_class1 <- sum(df$Pclass == 1)
probability_class1 <- num_class1 / total_individuals
probability_class1
num_class2 <- sum(df$Pclass == 2)
probability_class2 <- num_class2 / total_individuals
probability_class2
num_class3 <- sum(df$Pclass == 3)
probability_class3 <- num_class3 / total_individuals
probability_class3
summary(df,
mean = mean() )
# Create a DAG
dag <- dagitty("dag {
Sex -> Survived
P_class -> Survived
Age -> Survived
Fare -> P_class -> Survived
Age -> P_class
}")
# Plot it
plot(dag)
n <- 891
# Simulate Survived using a binomial distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 5)
# Simulate Sex using a binomial distribution
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
gridExtra::grid.arrange(
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(simulated_data, aes(x = Pclass)) +
geom_bar(fill = "pink") +
labs(x = "Class", y = "Count", title = "Distribution of Simulated class"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ggplot(simulated_data, aes(x = Survived)) +
geom_bar(fill = "green4") +
labs(x = "Survived", y = "Count", title = "Distribution of Simulated Survivability"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "pink") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(simulated_data, aes(x = Sex)) +
geom_bar(fill = "green4") +
labs(x = "Sex", y = "Count", title = "Distribution of Simulated Sex"),
ncol = 2)
n <- 891
# Simulate Survived using a bernoulli distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 14)
# Simulating Sex
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
print(Sim_Fare)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
#install_cmdstan()
simulated_data$Survived = as.numeric(simulated_data$Survived)
simulated_data <- simulated_data %>%
mutate(Sex = as.numeric(Sex) + 1)
# Define the model using the ulam function
model_HMC <- ulam(
alist(
Survived ~ dbern(p),
logit(p) <- a + bPclass * Pclass + bSex * Sex + bAge * Age + bFare * Fare,
a ~ dnorm(0, 0.5),
bPclass ~ dnorm(1.5, 0.5),
bSex ~ dnorm(1.5, 0.25),
bAge ~ dnorm(0, 0.5),
bFare ~ dnorm(0, 0.5)
),
data = simulated_data, chains = 2, cores = 2
)
precis(model_HMC)
knitr::opts_chunk$set(echo = TRUE)
# Run this to install rethinking
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
# Run this to install rethinking
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking", force = TRUE)
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
knitr::opts_chunk$set(echo = TRUE)
# Run this to install rethinking
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Run this to install rethinking
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# library(cmdstanr)
library(dagitty)
pacman::p_load(rethinking)
library(tidyverse)
df = read.csv("data/titanic_train.csv")
# Some nice plots here please
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "skyblue") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(df, aes(x = Age)) +
geom_histogram(color = "black", fill = "orange", binwidth = 3) +
labs(x = "Age", y = "Count", title = "Age distribution"),
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ncol = 2)
# Calculate the total number of individuals
total_individuals <- nrow(df)
# Calculate the number of females
num_females <- sum(df$Sex == "female")
# Calculate the probability of being female
probability_female <- num_females / total_individuals
probability_female
total_individuals <- nrow(df)
num_class1 <- sum(df$Pclass == 1)
probability_class1 <- num_class1 / total_individuals
probability_class1
num_class2 <- sum(df$Pclass == 2)
probability_class2 <- num_class2 / total_individuals
probability_class2
num_class3 <- sum(df$Pclass == 3)
probability_class3 <- num_class3 / total_individuals
probability_class3
summary(df,
mean = mean() )
# Create a DAG
dag <- dagitty("dag {
Sex -> Survived
P_class -> Survived
Age -> Survived
Fare -> P_class -> Survived
Age -> P_class
}")
# Plot it
plot(dag)
n <- 891
# Simulate Survived using a binomial distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 5)
# Simulate Sex using a binomial distribution
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
gridExtra::grid.arrange(
ggplot(df, aes(x = Pclass)) +
geom_bar(fill = "green4") +
labs(x = "Class", y = "Count", title = "Distribution of Class"),
ggplot(simulated_data, aes(x = Pclass)) +
geom_bar(fill = "pink") +
labs(x = "Class", y = "Count", title = "Distribution of Simulated class"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Survived)) +
geom_bar(fill = "pink") +
labs(x = "Survived", y = "Count", title = "Distribution of Survivability"),
ggplot(simulated_data, aes(x = Survived)) +
geom_bar(fill = "green4") +
labs(x = "Survived", y = "Count", title = "Distribution of Simulated Survivability"),
ncol = 2)
gridExtra::grid.arrange(
ggplot(df, aes(x = Sex)) +
geom_bar(fill = "pink") +
labs(x = "Sex", y = "Count", title = "Distribution of Sex"),
ggplot(simulated_data, aes(x = Sex)) +
geom_bar(fill = "green4") +
labs(x = "Sex", y = "Count", title = "Distribution of Simulated Sex"),
ncol = 2)
n <- 891
# Simulate Survived using a bernoulli distribution
Sim_Survived <- rbernoulli(n, p = 0.3) #guessing that there is 70 % chance you do not survive this. Should be adjusted
# Simulate Age using a normal distribution
Sim_Age <- rnorm(n, mean = 28, sd = 14)
# Simulating Sex
Sim_Sex <- rbernoulli(n, p = 0.35)  # Assuming 0.35 represents the probability of being female
# Simulate P_class using a categorical distribution
Sim_P_class <- sample(1:3, size = n, replace = TRUE, prob = c(0.25, 0.2, 0.55))
#Finding the estimates to use for the gamma distribution
shape_estimate <- (mean(df$Fare) / var(df$Fare))^2
mean_fare <- mean(df$Fare)
rate_estimate <- 1 / mean_fare
# Simulate Fare using a gamma distribution, since Fare cannot be negative
Sim_Fare <- rgamma(n, shape = shape_estimate, rate = rate_estimate)
print(Sim_Fare)
# making a dataframe for the simulated data
simulated_data <- data.frame(
Survived = Sim_Survived,
Age = Sim_Age,
Sex = Sim_Sex,
Pclass = Sim_P_class,
Fare = Sim_Fare
)
ggplot() +
geom_density(data = df, aes(x = Age), color = "blue", alpha = 0.5) +
geom_density(data = simulated_data, aes(x = Age), color = "pink", alpha = 0.5) +
labs(title = "Comparison of Age Distributions",
x = "Age",
y = "Density",
color = "") +
theme_minimal()
#install_cmdstan()
simulated_data$Survived = as.numeric(simulated_data$Survived)
simulated_data <- simulated_data %>%
mutate(Sex = as.numeric(Sex) + 1)
# Define the model using the ulam function
model_HMC <- ulam(
alist(
Survived ~ dbern(p),
logit(p) <- a + bPclass * Pclass + bSex * Sex + bAge * Age + bFare * Fare,
a ~ dnorm(0, 0.5),
bPclass ~ dnorm(1.5, 0.5),
bSex ~ dnorm(1.5, 0.25),
bAge ~ dnorm(0, 0.5),
bFare ~ dnorm(0, 0.5)
),
data = simulated_data, chains = 2, cores = 2
)
precis(model_HMC)
